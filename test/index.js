// @flow
import test from 'tape'
import {parse} from '../dist/es5/parse'
import {serialize} from '../dist/es5/serialize'
import {roundCorners} from '../dist/es5/index'
import {getSubPaths} from '../dist/es5/utils'

//todo: test new lines
test('round corners should do nothing when there are no double lines', (t) => {
    t.deepEquals(serialize(roundCorners(parse('M0 0C100 100 250 100 250 200S400 300 400 200Z'), 30)), 'M0 0C100 100 250 100 250 200S400 300 400 200Z')
    t.deepEquals(serialize(roundCorners(parse('M0 0L100 0C100 100 250 100 250 200'), 30)), 'M0 0L100 0C100 100 250 100 250 200')
    t.end()
})

test('unclosed path, single corner', (t) => {
    t.deepEquals(serialize(roundCorners(parse('M0 0L100 0 100 100'), 30)), 'M0 0L70 0Q100 0 100 30L100 100')
    t.deepEquals(serialize(roundCorners(parse('M50 30L150 30 150 130'), 30)), 'M50 30L120 30Q150 30 150 60L150 130')
    t.end()
})

test('unclosed path, single corner, use relative coordinates', (t) => {
    t.deepEquals(serialize(roundCorners(parse('M50 30l100 0 0 100'), 30)), 'M50 30L120 30Q150 30 150 60L150 130')
    t.end()
})

test('unclosed path, two corners', (t) => {
    t.deepEquals(serialize(roundCorners(parse('M50 50l 100 0 0 100 -100 0'), 30)), 'M50 50L120 50Q150 50 150 80L150 120Q150 150 120 150L50 150')
    t.end()
})

test('unclosed path, three corners', (t) => {
    t.deepEquals(serialize(roundCorners(parse('M50 50l 100 0 0 100 -100 0 0-50'), 30)), 'M50 50L120 50Q150 50 150 80L150 120Q150 150 120 150L80 150Q50 150 50 120L50 100')
    t.end()
})

test('closed path, square, just lines', (t) => {
    t.deepEquals(
        serialize(roundCorners(parse('M 0 0L 100 0 L 100 100 L 0 100 L 0 0'), 20)),
        'M20 0L80 0Q100 0 100 20L100 80Q100 100 80 100L20 100Q0 100 0 80L0 20Q0 0 20 0'
    )
    t.end()
})

test('square with Z command', (t) => {
    t.deepEquals(
        serialize(roundCorners(parse('M 0 0L 100 0 L 100 100 L 0 100 Z'), 20)),
        'M20 0L80 0Q100 0 100 20L100 80Q100 100 80 100L20 100Q0 100 0 80L0 20Q0 0 20 0'
    )
    t.end()
})

test('two closed sub-pathes', (t) => {
    t.deepEquals(
        serialize(roundCorners(parse('M 0 0L 100 0 L 100 100 L 0 100 Z M 200 200 l 100 0 l 0 100 l -100 0 z'), 20)),
        'M20 0L80 0Q100 0 100 20L100 80Q100 100 80 100L20 100Q0 100 0 80L0 20Q0 0 20 0M220 200L280 200Q300 200 300 220L300 280Q300 300 280 300L220 300Q200 300 200 280L200 220Q200 200 220 200'
    )
    t.end()
})

test('two squares, without explicit M command', (t) => {
    t.deepEquals(
        serialize(roundCorners(parse('M 0 0L 100 0 L 100 100 L 0 100 Z l 200 0 l 0 200 l -200 0 z'), 20)),
        'M20 0L80 0Q100 0 100 20L100 80Q100 100 80 100L20 100Q0 100 0 80L0 20Q0 0 20 0M20 0L180 0Q200 0 200 20L200 180Q200 200 180 200L20 200Q0 200 0 180L0 20Q0 0 20 0'
    )
    t.end()
})

test('two squares, with single M command on first sub-path', (t) => {
    t.deepEquals(
        serialize(roundCorners(parse('M 20 20 l 100 0 l 0 100 l -100 0 Z l 200 0 l 0 200 l -200 0 z'), 20)),
        'M40 20L100 20Q120 20 120 40L120 100Q120 120 100 120L40 120Q20 120 20 100L20 40Q20 20 40 20M40 20L200 20Q220 20 220 40L220 200Q220 220 200 220L40 220Q20 220 20 200L20 40Q20 20 40 20'
    )
    t.end()
})

test('path with zero-length line should work fine', (t) => {
    t.deepEquals(
        serialize(roundCorners(parse('m 0,0 l 100,0 0,100 -100,0 l 0,0 z'), 20)),
        'M20 0L80 0Q100 0 100 20L100 80Q100 100 80 100L20 100Q0 100 0 80L0 20Q0 0 20 0'
    )
    t.end()
})

test('path real-data', (t) => {
    t.deepEquals(
        serialize(roundCorners(parse('M47.256202603055186,412.7710280922472 L47.256202603055186,190.53742842378628 L47.256202603055186,190.53742842378628 C47.256202603055186,95.07591957922395 121.43198434744717,17.689055449034292 212.93246449404793,17.689055449034292 L212.93246449404793,17.689055449034292 L212.93246449404793,17.689055449034292 C256.8725285891547,17.689055449034292 299.012932303885,35.89981785326856 330.08328979065266,68.31517114803404 C361.1536218620678,100.7305244427928 378.60871367736115,144.69518597090072 378.60871367736115,190.53742842378628 L378.60871367736115,215.23005502843273 L425.94475038035534,215.23005502843273 L331.27266426670724,314.0005879625946 L236.6004891993634,215.23005502843273 L283.9365640253741,215.23005502843273 L283.9365640253741,190.53742842378628 C283.9365640253741,149.62535888659673 252.14692693933816,116.4595751254103 212.9324772017109,116.4595751254103 L212.9324772017109,116.4595751254103 L212.9324772017109,116.4595751254103 C173.71797663340448,116.4595751254103 141.92836496272298,149.62535888659673 141.92836496272298,190.53742842378628 L141.92836496272298,412.7710280922472 L47.256202603055186,412.7710280922472 z'), 15)),
        'M47.256202603055186 397.7710280922472L47.256202603055186 190.53742842378628C47.256202603055186 95.07591957922395 121.43198434744717 17.689055449034292 212.93246449404793 17.689055449034292 256.8725285891547 17.689055449034292 299.012932303885 35.89981785326856 330.08328979065266 68.31517114803404 361.1536218620678 100.7305244427928 378.60871367736115 144.69518597090072 378.60871367736115 190.53742842378628L378.60871367736115 200.23005502843273Q378.60871367736115 215.23005502843273 393.60871367736115 215.23005502843273L390.7894216032772 215.23005502843273Q425.94475038035534 215.23005502843273 401.6183140017248 240.60960653236793L342.10155157775597 302.70290757228076Q331.27266426670724 314.0005879625946 320.4437716527865 302.70291265511446L260.9269533069911 240.60961161520166Q236.6004891993634 215.23005502843273 271.755840833513 215.23005502843273L268.9365640253741 215.23005502843273Q283.9365640253741 215.23005502843273 283.9365640253741 200.23005502843273L283.9365640253741 190.53742842378628C283.9365640253741 149.62535888659673 252.14692693933816 116.4595751254103 212.9324772017109 116.4595751254103 173.71797663340448 116.4595751254103 141.92836496272298 149.62535888659673 141.92836496272298 190.53742842378628L141.92836496272298 397.7710280922472Q141.92836496272298 412.7710280922472 126.92836496272298 412.7710280922472L62.256202603055186 412.7710280922472Q47.256202603055186 412.7710280922472 47.256202603055186 397.7710280922472'
    )
    t.deepEquals(
        serialize(roundCorners(parse('m11.107502,196.931648l181.897536,0l56.207738,-172.801899l56.20777,172.801899l181.897504,0l-147.157929,106.796224l56.210647,172.801899l-147.157993,-106.799133l-147.157961,106.799133l56.210663,-172.801899l-147.157977,-106.796224z'), 15)),
        'M11.108312280553339 196.931648L182.11055793502635 196.931648Q193.005038 196.931648 196.37492514742812 186.57145705100163L234.94841284806768 67.98330241429201Q249.21277600000002 24.129749000000004 263.47714649586567 67.9833000255104L302.05065771104495 186.57145943978324Q305.420546 196.931648 316.3150241464411 196.931648L441.1107328874009 196.931648Q487.31804999999997 196.931648 449.9210165079214 224.0716192736887L348.98839374082274 297.32097160687204Q340.160121 303.727872 343.5343807848985 314.1009690851445L382.0947998323017 432.6428111249106Q396.370768 476.529771 359.0200649553218 449.4226963464873L258.0232142584649 376.12476756762203Q249.212775 369.730638 240.40233640249673 376.1247684783578L139.40552612889007 449.42268385914156Q102.054814 476.529771 116.33079038552918 432.64279835392745L154.891215499595 314.10097140629176Q158.26547699999998 303.727872 149.43720104983868 297.320971367578L48.50454764847217 224.07162069481973Q11.107499999999987 196.931648 57.31482940451825 196.931648L11.106691719446658 196.931648Q11.107502 196.931648 11.108312280553339 196.931648'
    )
    t.end()
})
